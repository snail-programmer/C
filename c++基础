类继承、类模板、类多态性(虚函数)、友元类、函数模板
=========================================================================================================================]
                            C++类的封装性，继承性、多态性
1.类的一个特征就是封装，public和private作用就是实现这一目的。所以：
用户代码（类外）可以访问public成员而不能访问private成员；private成员只能由类成员（类内）和其所属类的友元类访问。
2.类的另一个特征就是继承，protected的作用就是实现这一目的。所以：
   protected成员可以被派生类和友元类访问，不能被用户代码（类外）访问。
3.public继承：基类public成员，protected成员，private成员的访问属性在派生类中分别变成：public, protected, private
4.protected继承：基类public成员，protected成员，private成员的访问属性在派生类中分别变成：protected, protected, private
5.private继承：基类public成员，protected成员，private成员的访问属性在派生类中分别变成：private, private, private
6.c++中子类重写父类的虚函数是c++的多态性，而同名函数不同参数则是函数的重载
7.c++中定义纯虚函数的类成为抽象类，不能再定义该类的对象
8.c++的多态性包含两种实现方法，函数重载实现编译时的多态性，运行时的多态性则是定义虚函数的方法
9.运算符重载就是对一个已有的运算符赋予新的含义，使之实现新功能，其有两种方式，重载为类的成员函数和重载为类的友元函数。
10.c++引用类型是为变量所在的内存地址新增一个变量标识。
11.共用体类型内的成员共用一块内存区域，某一刻共用体的对象只能使用一种数据类型。
=========================================================================================================================]
//类模板
template<class T>
class sa{
  public:
     T i;
     T s;
     sa()
     {...}
};
int main()
{
   sa<int>tsa;
   sa<char>tsc;
   sa<...>tsx;
   return 0;
 }
//函数模板
template<typename F>
F  func(F para1,F para2,F **addr)
{
	F naddr= para1 + para2;
	*addr = &naddr;
	return 0;
}  
int main()
{
 	int *buf = new int;
 	add<int>(3, 3, &buf);
}
//重载单目运算符++
class ope{
  private:
    int a;
    int b;
  public:
    friend ope operator++(ope &o);
    ope(int a,int b)
     {
        this->a=a;
        this->b=b;
      }
};
ope operator++(ope &o)
{
    ++o.a;
    ++o.b;
    return ope(0,0);
}
int main()
{
   ope opera(10,20);
   ++opera;//或者operator++(opera);
   return 0;
}
